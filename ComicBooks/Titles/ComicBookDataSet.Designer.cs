//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.832
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Comics {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("ComicBookDataSet")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class ComicBookDataSet : System.Data.DataSet {
        
        private ComicBookTitleDataTable tableComicBookTitle;
        
        private ComicBookDetails1DataTable tableComicBookDetails1;
        
        private ComicBookNumOwnedDataTable tableComicBookNumOwned;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ComicBookDataSet() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ComicBookDataSet(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["ComicBookTitle"] != null)) {
                    base.Tables.Add(new ComicBookTitleDataTable(ds.Tables["ComicBookTitle"]));
                }
                if ((ds.Tables["ComicBookDetails1"] != null)) {
                    base.Tables.Add(new ComicBookDetails1DataTable(ds.Tables["ComicBookDetails1"]));
                }
                if ((ds.Tables["ComicBookNumOwned"] != null)) {
                    base.Tables.Add(new ComicBookNumOwnedDataTable(ds.Tables["ComicBookNumOwned"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ComicBookTitleDataTable ComicBookTitle {
            get {
                return this.tableComicBookTitle;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ComicBookDetails1DataTable ComicBookDetails1 {
            get {
                return this.tableComicBookDetails1;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ComicBookNumOwnedDataTable ComicBookNumOwned {
            get {
                return this.tableComicBookNumOwned;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            ComicBookDataSet cln = ((ComicBookDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ComicBookTitle"] != null)) {
                    base.Tables.Add(new ComicBookTitleDataTable(ds.Tables["ComicBookTitle"]));
                }
                if ((ds.Tables["ComicBookDetails1"] != null)) {
                    base.Tables.Add(new ComicBookDetails1DataTable(ds.Tables["ComicBookDetails1"]));
                }
                if ((ds.Tables["ComicBookNumOwned"] != null)) {
                    base.Tables.Add(new ComicBookNumOwnedDataTable(ds.Tables["ComicBookNumOwned"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableComicBookTitle = ((ComicBookTitleDataTable)(base.Tables["ComicBookTitle"]));
            if ((initTable == true)) {
                if ((this.tableComicBookTitle != null)) {
                    this.tableComicBookTitle.InitVars();
                }
            }
            this.tableComicBookDetails1 = ((ComicBookDetails1DataTable)(base.Tables["ComicBookDetails1"]));
            if ((initTable == true)) {
                if ((this.tableComicBookDetails1 != null)) {
                    this.tableComicBookDetails1.InitVars();
                }
            }
            this.tableComicBookNumOwned = ((ComicBookNumOwnedDataTable)(base.Tables["ComicBookNumOwned"]));
            if ((initTable == true)) {
                if ((this.tableComicBookNumOwned != null)) {
                    this.tableComicBookNumOwned.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ComicBookDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ComicBookDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableComicBookTitle = new ComicBookTitleDataTable();
            base.Tables.Add(this.tableComicBookTitle);
            this.tableComicBookDetails1 = new ComicBookDetails1DataTable();
            base.Tables.Add(this.tableComicBookDetails1);
            this.tableComicBookNumOwned = new ComicBookNumOwnedDataTable();
            base.Tables.Add(this.tableComicBookNumOwned);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeComicBookTitle() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeComicBookDetails1() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeComicBookNumOwned() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            ComicBookDataSet ds = new ComicBookDataSet();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void ComicBookTitleRowChangeEventHandler(object sender, ComicBookTitleRowChangeEvent e);
        
        public delegate void ComicBookDetails1RowChangeEventHandler(object sender, ComicBookDetails1RowChangeEvent e);
        
        public delegate void ComicBookNumOwnedRowChangeEventHandler(object sender, ComicBookNumOwnedRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ComicBookTitleDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnTitle;
            
            private System.Data.DataColumn columnFirstIssue;
            
            private System.Data.DataColumn columnLastIssue;
            
            private System.Data.DataColumn columnNumIssues;
            
            private System.Data.DataColumn columnNumSpIssues;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ComicBookTitleDataTable() {
                this.TableName = "ComicBookTitle";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ComicBookTitleDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ComicBookTitleDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TitleColumn {
                get {
                    return this.columnTitle;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FirstIssueColumn {
                get {
                    return this.columnFirstIssue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LastIssueColumn {
                get {
                    return this.columnLastIssue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NumIssuesColumn {
                get {
                    return this.columnNumIssues;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NumSpIssuesColumn {
                get {
                    return this.columnNumSpIssues;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ComicBookTitleRow this[int index] {
                get {
                    return ((ComicBookTitleRow)(this.Rows[index]));
                }
            }
            
            public event ComicBookTitleRowChangeEventHandler ComicBookTitleRowChanging;
            
            public event ComicBookTitleRowChangeEventHandler ComicBookTitleRowChanged;
            
            public event ComicBookTitleRowChangeEventHandler ComicBookTitleRowDeleting;
            
            public event ComicBookTitleRowChangeEventHandler ComicBookTitleRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddComicBookTitleRow(ComicBookTitleRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ComicBookTitleRow AddComicBookTitleRow(string Title, int FirstIssue, int LastIssue, int NumIssues, int NumSpIssues) {
                ComicBookTitleRow rowComicBookTitleRow = ((ComicBookTitleRow)(this.NewRow()));
                rowComicBookTitleRow.ItemArray = new object[] {
                        Title,
                        FirstIssue,
                        LastIssue,
                        NumIssues,
                        NumSpIssues};
                this.Rows.Add(rowComicBookTitleRow);
                return rowComicBookTitleRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ComicBookTitleRow FindByTitle(string Title) {
                return ((ComicBookTitleRow)(this.Rows.Find(new object[] {
                            Title})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ComicBookTitleDataTable cln = ((ComicBookTitleDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ComicBookTitleDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTitle = base.Columns["Title"];
                this.columnFirstIssue = base.Columns["FirstIssue"];
                this.columnLastIssue = base.Columns["LastIssue"];
                this.columnNumIssues = base.Columns["NumIssues"];
                this.columnNumSpIssues = base.Columns["NumSpIssues"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTitle = new System.Data.DataColumn("Title", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTitle);
                this.columnFirstIssue = new System.Data.DataColumn("FirstIssue", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFirstIssue);
                this.columnLastIssue = new System.Data.DataColumn("LastIssue", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastIssue);
                this.columnNumIssues = new System.Data.DataColumn("NumIssues", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumIssues);
                this.columnNumSpIssues = new System.Data.DataColumn("NumSpIssues", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumSpIssues);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnTitle}, true));
                this.columnTitle.AllowDBNull = false;
                this.columnTitle.Unique = true;
                this.columnTitle.MaxLength = 50;
                this.columnFirstIssue.AllowDBNull = false;
                this.columnLastIssue.AllowDBNull = false;
                this.columnNumIssues.AllowDBNull = false;
                this.columnNumSpIssues.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ComicBookTitleRow NewComicBookTitleRow() {
                return ((ComicBookTitleRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ComicBookTitleRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ComicBookTitleRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ComicBookTitleRowChanged != null)) {
                    this.ComicBookTitleRowChanged(this, new ComicBookTitleRowChangeEvent(((ComicBookTitleRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ComicBookTitleRowChanging != null)) {
                    this.ComicBookTitleRowChanging(this, new ComicBookTitleRowChangeEvent(((ComicBookTitleRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ComicBookTitleRowDeleted != null)) {
                    this.ComicBookTitleRowDeleted(this, new ComicBookTitleRowChangeEvent(((ComicBookTitleRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ComicBookTitleRowDeleting != null)) {
                    this.ComicBookTitleRowDeleting(this, new ComicBookTitleRowChangeEvent(((ComicBookTitleRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveComicBookTitleRow(ComicBookTitleRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ComicBookDataSet ds = new ComicBookDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ComicBookTitleDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ComicBookDetails1DataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnOwn;
            
            private System.Data.DataColumn columnWant;
            
            private System.Data.DataColumn columnTitle;
            
            private System.Data.DataColumn columnSpecialIssue;
            
            private System.Data.DataColumn columnIssueNum;
            
            private System.Data.DataColumn columnIssueName;
            
            private System.Data.DataColumn columnGrade;
            
            private System.Data.DataColumn columnDescription;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ComicBookDetails1DataTable() {
                this.TableName = "ComicBookDetails1";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ComicBookDetails1DataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ComicBookDetails1DataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OwnColumn {
                get {
                    return this.columnOwn;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn WantColumn {
                get {
                    return this.columnWant;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TitleColumn {
                get {
                    return this.columnTitle;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SpecialIssueColumn {
                get {
                    return this.columnSpecialIssue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IssueNumColumn {
                get {
                    return this.columnIssueNum;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IssueNameColumn {
                get {
                    return this.columnIssueName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn GradeColumn {
                get {
                    return this.columnGrade;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ComicBookDetails1Row this[int index] {
                get {
                    return ((ComicBookDetails1Row)(this.Rows[index]));
                }
            }
            
            public event ComicBookDetails1RowChangeEventHandler ComicBookDetails1RowChanging;
            
            public event ComicBookDetails1RowChangeEventHandler ComicBookDetails1RowChanged;
            
            public event ComicBookDetails1RowChangeEventHandler ComicBookDetails1RowDeleting;
            
            public event ComicBookDetails1RowChangeEventHandler ComicBookDetails1RowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddComicBookDetails1Row(ComicBookDetails1Row row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ComicBookDetails1Row AddComicBookDetails1Row(bool Own, bool Want, string Title, bool SpecialIssue, int IssueNum, string IssueName, string Grade, string Description) {
                ComicBookDetails1Row rowComicBookDetails1Row = ((ComicBookDetails1Row)(this.NewRow()));
                rowComicBookDetails1Row.ItemArray = new object[] {
                        Own,
                        Want,
                        Title,
                        SpecialIssue,
                        IssueNum,
                        IssueName,
                        Grade,
                        Description};
                this.Rows.Add(rowComicBookDetails1Row);
                return rowComicBookDetails1Row;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ComicBookDetails1Row FindByTitleSpecialIssueIssueNum(string Title, bool SpecialIssue, int IssueNum) {
                return ((ComicBookDetails1Row)(this.Rows.Find(new object[] {
                            Title,
                            SpecialIssue,
                            IssueNum})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ComicBookDetails1DataTable cln = ((ComicBookDetails1DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ComicBookDetails1DataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnOwn = base.Columns["Own"];
                this.columnWant = base.Columns["Want"];
                this.columnTitle = base.Columns["Title"];
                this.columnSpecialIssue = base.Columns["SpecialIssue"];
                this.columnIssueNum = base.Columns["IssueNum"];
                this.columnIssueName = base.Columns["IssueName"];
                this.columnGrade = base.Columns["Grade"];
                this.columnDescription = base.Columns["Description"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnOwn = new System.Data.DataColumn("Own", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwn);
                this.columnWant = new System.Data.DataColumn("Want", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnWant);
                this.columnTitle = new System.Data.DataColumn("Title", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTitle);
                this.columnSpecialIssue = new System.Data.DataColumn("SpecialIssue", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSpecialIssue);
                this.columnIssueNum = new System.Data.DataColumn("IssueNum", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIssueNum);
                this.columnIssueName = new System.Data.DataColumn("IssueName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIssueName);
                this.columnGrade = new System.Data.DataColumn("Grade", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrade);
                this.columnDescription = new System.Data.DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnTitle,
                                this.columnSpecialIssue,
                                this.columnIssueNum}, true));
                this.columnOwn.AllowDBNull = false;
                this.columnWant.AllowDBNull = false;
                this.columnTitle.AllowDBNull = false;
                this.columnTitle.MaxLength = 50;
                this.columnSpecialIssue.AllowDBNull = false;
                this.columnIssueNum.AllowDBNull = false;
                this.columnIssueName.MaxLength = 50;
                this.columnGrade.MaxLength = 50;
                this.columnDescription.MaxLength = 2147483647;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ComicBookDetails1Row NewComicBookDetails1Row() {
                return ((ComicBookDetails1Row)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ComicBookDetails1Row(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ComicBookDetails1Row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ComicBookDetails1RowChanged != null)) {
                    this.ComicBookDetails1RowChanged(this, new ComicBookDetails1RowChangeEvent(((ComicBookDetails1Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ComicBookDetails1RowChanging != null)) {
                    this.ComicBookDetails1RowChanging(this, new ComicBookDetails1RowChangeEvent(((ComicBookDetails1Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ComicBookDetails1RowDeleted != null)) {
                    this.ComicBookDetails1RowDeleted(this, new ComicBookDetails1RowChangeEvent(((ComicBookDetails1Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ComicBookDetails1RowDeleting != null)) {
                    this.ComicBookDetails1RowDeleting(this, new ComicBookDetails1RowChangeEvent(((ComicBookDetails1Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveComicBookDetails1Row(ComicBookDetails1Row row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ComicBookDataSet ds = new ComicBookDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ComicBookDetails1DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ComicBookNumOwnedDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnTitle;
            
            private System.Data.DataColumn columnCount_of_Owned;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ComicBookNumOwnedDataTable() {
                this.TableName = "ComicBookNumOwned";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ComicBookNumOwnedDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ComicBookNumOwnedDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TitleColumn {
                get {
                    return this.columnTitle;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Count_of_OwnedColumn {
                get {
                    return this.columnCount_of_Owned;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ComicBookNumOwnedRow this[int index] {
                get {
                    return ((ComicBookNumOwnedRow)(this.Rows[index]));
                }
            }
            
            public event ComicBookNumOwnedRowChangeEventHandler ComicBookNumOwnedRowChanging;
            
            public event ComicBookNumOwnedRowChangeEventHandler ComicBookNumOwnedRowChanged;
            
            public event ComicBookNumOwnedRowChangeEventHandler ComicBookNumOwnedRowDeleting;
            
            public event ComicBookNumOwnedRowChangeEventHandler ComicBookNumOwnedRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddComicBookNumOwnedRow(ComicBookNumOwnedRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ComicBookNumOwnedRow AddComicBookNumOwnedRow(string Title, int Count_of_Owned) {
                ComicBookNumOwnedRow rowComicBookNumOwnedRow = ((ComicBookNumOwnedRow)(this.NewRow()));
                rowComicBookNumOwnedRow.ItemArray = new object[] {
                        Title,
                        Count_of_Owned};
                this.Rows.Add(rowComicBookNumOwnedRow);
                return rowComicBookNumOwnedRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ComicBookNumOwnedRow FindByTitle(string Title) {
                return ((ComicBookNumOwnedRow)(this.Rows.Find(new object[] {
                            Title})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ComicBookNumOwnedDataTable cln = ((ComicBookNumOwnedDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ComicBookNumOwnedDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTitle = base.Columns["Title"];
                this.columnCount_of_Owned = base.Columns["Count of Owned"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTitle = new System.Data.DataColumn("Title", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTitle);
                this.columnCount_of_Owned = new System.Data.DataColumn("Count of Owned", typeof(int), null, System.Data.MappingType.Element);
                this.columnCount_of_Owned.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Count_of_Owned");
                this.columnCount_of_Owned.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Count_of_OwnedColumn");
                this.columnCount_of_Owned.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnCount_of_Owned");
                this.columnCount_of_Owned.ExtendedProperties.Add("Generator_UserColumnName", "Count of Owned");
                base.Columns.Add(this.columnCount_of_Owned);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnTitle}, true));
                this.columnTitle.AllowDBNull = false;
                this.columnTitle.Unique = true;
                this.columnTitle.MaxLength = 50;
                this.columnCount_of_Owned.ReadOnly = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ComicBookNumOwnedRow NewComicBookNumOwnedRow() {
                return ((ComicBookNumOwnedRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ComicBookNumOwnedRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ComicBookNumOwnedRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ComicBookNumOwnedRowChanged != null)) {
                    this.ComicBookNumOwnedRowChanged(this, new ComicBookNumOwnedRowChangeEvent(((ComicBookNumOwnedRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ComicBookNumOwnedRowChanging != null)) {
                    this.ComicBookNumOwnedRowChanging(this, new ComicBookNumOwnedRowChangeEvent(((ComicBookNumOwnedRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ComicBookNumOwnedRowDeleted != null)) {
                    this.ComicBookNumOwnedRowDeleted(this, new ComicBookNumOwnedRowChangeEvent(((ComicBookNumOwnedRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ComicBookNumOwnedRowDeleting != null)) {
                    this.ComicBookNumOwnedRowDeleting(this, new ComicBookNumOwnedRowChangeEvent(((ComicBookNumOwnedRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveComicBookNumOwnedRow(ComicBookNumOwnedRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ComicBookDataSet ds = new ComicBookDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ComicBookNumOwnedDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ComicBookTitleRow : System.Data.DataRow {
            
            private ComicBookTitleDataTable tableComicBookTitle;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ComicBookTitleRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableComicBookTitle = ((ComicBookTitleDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Title {
                get {
                    return ((string)(this[this.tableComicBookTitle.TitleColumn]));
                }
                set {
                    this[this.tableComicBookTitle.TitleColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FirstIssue {
                get {
                    return ((int)(this[this.tableComicBookTitle.FirstIssueColumn]));
                }
                set {
                    this[this.tableComicBookTitle.FirstIssueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LastIssue {
                get {
                    return ((int)(this[this.tableComicBookTitle.LastIssueColumn]));
                }
                set {
                    this[this.tableComicBookTitle.LastIssueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NumIssues {
                get {
                    return ((int)(this[this.tableComicBookTitle.NumIssuesColumn]));
                }
                set {
                    this[this.tableComicBookTitle.NumIssuesColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NumSpIssues {
                get {
                    return ((int)(this[this.tableComicBookTitle.NumSpIssuesColumn]));
                }
                set {
                    this[this.tableComicBookTitle.NumSpIssuesColumn] = value;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ComicBookDetails1Row : System.Data.DataRow {
            
            private ComicBookDetails1DataTable tableComicBookDetails1;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ComicBookDetails1Row(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableComicBookDetails1 = ((ComicBookDetails1DataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Own {
                get {
                    return ((bool)(this[this.tableComicBookDetails1.OwnColumn]));
                }
                set {
                    this[this.tableComicBookDetails1.OwnColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Want {
                get {
                    return ((bool)(this[this.tableComicBookDetails1.WantColumn]));
                }
                set {
                    this[this.tableComicBookDetails1.WantColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Title {
                get {
                    return ((string)(this[this.tableComicBookDetails1.TitleColumn]));
                }
                set {
                    this[this.tableComicBookDetails1.TitleColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool SpecialIssue {
                get {
                    return ((bool)(this[this.tableComicBookDetails1.SpecialIssueColumn]));
                }
                set {
                    this[this.tableComicBookDetails1.SpecialIssueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IssueNum {
                get {
                    return ((int)(this[this.tableComicBookDetails1.IssueNumColumn]));
                }
                set {
                    this[this.tableComicBookDetails1.IssueNumColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IssueName {
                get {
                    try {
                        return ((string)(this[this.tableComicBookDetails1.IssueNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'IssueName\' in table \'ComicBookDetails1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableComicBookDetails1.IssueNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Grade {
                get {
                    try {
                        return ((string)(this[this.tableComicBookDetails1.GradeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Grade\' in table \'ComicBookDetails1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableComicBookDetails1.GradeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableComicBookDetails1.DescriptionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Description\' in table \'ComicBookDetails1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableComicBookDetails1.DescriptionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIssueNameNull() {
                return this.IsNull(this.tableComicBookDetails1.IssueNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIssueNameNull() {
                this[this.tableComicBookDetails1.IssueNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGradeNull() {
                return this.IsNull(this.tableComicBookDetails1.GradeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGradeNull() {
                this[this.tableComicBookDetails1.GradeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableComicBookDetails1.DescriptionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableComicBookDetails1.DescriptionColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ComicBookNumOwnedRow : System.Data.DataRow {
            
            private ComicBookNumOwnedDataTable tableComicBookNumOwned;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ComicBookNumOwnedRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableComicBookNumOwned = ((ComicBookNumOwnedDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Title {
                get {
                    return ((string)(this[this.tableComicBookNumOwned.TitleColumn]));
                }
                set {
                    this[this.tableComicBookNumOwned.TitleColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count_of_Owned {
                get {
                    try {
                        return ((int)(this[this.tableComicBookNumOwned.Count_of_OwnedColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Count of Owned\' in table \'ComicBookNumOwned\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableComicBookNumOwned.Count_of_OwnedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCount_of_OwnedNull() {
                return this.IsNull(this.tableComicBookNumOwned.Count_of_OwnedColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCount_of_OwnedNull() {
                this[this.tableComicBookNumOwned.Count_of_OwnedColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ComicBookTitleRowChangeEvent : System.EventArgs {
            
            private ComicBookTitleRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ComicBookTitleRowChangeEvent(ComicBookTitleRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ComicBookTitleRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ComicBookDetails1RowChangeEvent : System.EventArgs {
            
            private ComicBookDetails1Row eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ComicBookDetails1RowChangeEvent(ComicBookDetails1Row row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ComicBookDetails1Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ComicBookNumOwnedRowChangeEvent : System.EventArgs {
            
            private ComicBookNumOwnedRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ComicBookNumOwnedRowChangeEvent(ComicBookNumOwnedRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ComicBookNumOwnedRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace Comics.ComicBookDataSetTableAdapters {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ComicBookTitleTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ComicBookTitleTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ComicBookTitle";
            tableMapping.ColumnMappings.Add("Title", "Title");
            tableMapping.ColumnMappings.Add("FirstIssue", "FirstIssue");
            tableMapping.ColumnMappings.Add("LastIssue", "LastIssue");
            tableMapping.ColumnMappings.Add("NumIssues", "NumIssues");
            tableMapping.ColumnMappings.Add("NumSpIssues", "NumSpIssues");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [ComicBookTitle] WHERE (([Title] = @Original_Title) AND ([FirstIssue]" +
                " = @Original_FirstIssue) AND ([LastIssue] = @Original_LastIssue) AND ([NumIssues" +
                "] = @Original_NumIssues) AND ([NumSpIssues] = @Original_NumSpIssues))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Title", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Title", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_FirstIssue", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FirstIssue", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LastIssue", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "LastIssue", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_NumIssues", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "NumIssues", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_NumSpIssues", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "NumSpIssues", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [ComicBookTitle] ([Title], [FirstIssue], [LastIssue], [NumIssues], [NumSpIssues]) VALUES (@Title, @FirstIssue, @LastIssue, @NumIssues, @NumSpIssues);
SELECT Title, FirstIssue, LastIssue, NumIssues, NumSpIssues FROM ComicBookTitle WHERE (Title = @Title)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Title", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Title", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FirstIssue", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FirstIssue", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LastIssue", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "LastIssue", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NumIssues", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "NumIssues", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NumSpIssues", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "NumSpIssues", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [ComicBookTitle] SET [Title] = @Title, [FirstIssue] = @FirstIssue, [LastIssue] = @LastIssue, [NumIssues] = @NumIssues, [NumSpIssues] = @NumSpIssues WHERE (([Title] = @Original_Title) AND ([FirstIssue] = @Original_FirstIssue) AND ([LastIssue] = @Original_LastIssue) AND ([NumIssues] = @Original_NumIssues) AND ([NumSpIssues] = @Original_NumSpIssues));
SELECT Title, FirstIssue, LastIssue, NumIssues, NumSpIssues FROM ComicBookTitle WHERE (Title = @Title)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Title", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Title", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FirstIssue", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FirstIssue", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LastIssue", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "LastIssue", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NumIssues", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "NumIssues", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NumSpIssues", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "NumSpIssues", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Title", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Title", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_FirstIssue", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FirstIssue", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LastIssue", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "LastIssue", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_NumIssues", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "NumIssues", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_NumSpIssues", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "NumSpIssues", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Comics.Properties.Settings.Default.ComicBookConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[7];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT        Title, FirstIssue, LastIssue, NumIssues, NumSpIssues\r\nFROM         " +
                "   ComicBookTitle";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "DELETE FROM ComicBookDetails\r\nWHERE        (Title = @Param1)";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Param1", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "Title", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[2] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "SELECT        Title, FirstIssue, LastIssue, NumIssues, NumSpIssues\r\nFROM         " +
                "   ComicBookTitle\r\nWHERE        (Title LIKE \'%\' + @Param1 + \'%\')";
            this._commandCollection[2].CommandType = System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Param1", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "Title", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = "INSERT INTO ComicBookDetails\r\n                         (Own, Want, Title, Special" +
                "Issue, IssueNum)\r\nVALUES        (0, 0,@Param1, 0,@Param2)";
            this._commandCollection[3].CommandType = System.Data.CommandType.Text;
            this._commandCollection[3].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Param1", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "Title", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Param2", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "IssueNum", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[4].Connection = this.Connection;
            this._commandCollection[4].CommandText = "INSERT INTO ComicBookDetails\r\n                         (Own, Want, Title, Special" +
                "Issue, IssueNum, IssueName)\r\nVALUES        (0, 0,@Param1,1,@Param2, \'SP\' +@Param" +
                "3); ";
            this._commandCollection[4].CommandType = System.Data.CommandType.Text;
            this._commandCollection[4].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Param1", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "Title", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Param2", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "IssueNum", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Param3", System.Data.SqlDbType.VarChar, 1024, System.Data.ParameterDirection.Input, 0, 0, "", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[5].Connection = this.Connection;
            this._commandCollection[5].CommandText = "INSERT INTO ComicBookTitle\r\n                         (Title, FirstIssue, LastIssu" +
                "e, NumIssues, NumSpIssues)\r\nVALUES        (@Param1,@Param2,@Param3,@Param4,@Para" +
                "m5)";
            this._commandCollection[5].CommandType = System.Data.CommandType.Text;
            this._commandCollection[5].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Param1", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "Title", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Param2", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "FirstIssue", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Param3", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "LastIssue", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Param4", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "NumIssues", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Param5", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "NumSpIssues", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[6].Connection = this.Connection;
            this._commandCollection[6].CommandText = "UPDATE       ComicBookTitle\r\nSET                Title = @Param1, FirstIssue = @Pa" +
                "ram2, LastIssue = @Param3, NumIssues = @Param4, NumSpIssues = @Param5\r\nWHERE    " +
                "    (Title = @Param6)";
            this._commandCollection[6].CommandType = System.Data.CommandType.Text;
            this._commandCollection[6].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Param1", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "Title", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Param2", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "FirstIssue", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Param3", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "LastIssue", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Param4", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "NumIssues", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Param5", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "NumSpIssues", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Param6", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "Title", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ComicBookDataSet.ComicBookTitleDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ComicBookDataSet.ComicBookTitleDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ComicBookDataSet.ComicBookTitleDataTable dataTable = new ComicBookDataSet.ComicBookTitleDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillSearch(ComicBookDataSet.ComicBookTitleDataTable dataTable, string Param1) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((Param1 == null)) {
                throw new System.ArgumentNullException("Param1");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(Param1));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual ComicBookDataSet.ComicBookTitleDataTable GetDataSearch(string Param1) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((Param1 == null)) {
                throw new System.ArgumentNullException("Param1");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(Param1));
            }
            ComicBookDataSet.ComicBookTitleDataTable dataTable = new ComicBookDataSet.ComicBookTitleDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ComicBookDataSet.ComicBookTitleDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ComicBookDataSet dataSet) {
            return this.Adapter.Update(dataSet, "ComicBookTitle");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_Title, int Original_FirstIssue, int Original_LastIssue, int Original_NumIssues, int Original_NumSpIssues) {
            if ((Original_Title == null)) {
                throw new System.ArgumentNullException("Original_Title");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_Title));
            }
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_FirstIssue));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_LastIssue));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(Original_NumIssues));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_NumSpIssues));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string Title, int FirstIssue, int LastIssue, int NumIssues, int NumSpIssues) {
            if ((Title == null)) {
                throw new System.ArgumentNullException("Title");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(Title));
            }
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(FirstIssue));
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(LastIssue));
            this.Adapter.InsertCommand.Parameters[3].Value = ((int)(NumIssues));
            this.Adapter.InsertCommand.Parameters[4].Value = ((int)(NumSpIssues));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Title, int FirstIssue, int LastIssue, int NumIssues, int NumSpIssues, string Original_Title, int Original_FirstIssue, int Original_LastIssue, int Original_NumIssues, int Original_NumSpIssues) {
            if ((Title == null)) {
                throw new System.ArgumentNullException("Title");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(Title));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(FirstIssue));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(LastIssue));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(NumIssues));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(NumSpIssues));
            if ((Original_Title == null)) {
                throw new System.ArgumentNullException("Original_Title");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_Title));
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Original_FirstIssue));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_LastIssue));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Original_NumIssues));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(Original_NumSpIssues));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, false)]
        public virtual int DeleteDetails(string Param1) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            if ((Param1 == null)) {
                throw new System.ArgumentNullException("Param1");
            }
            else {
                command.Parameters[0].Value = ((string)(Param1));
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int InsertDetails1(string Param1, int Param2) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[3];
            if ((Param1 == null)) {
                throw new System.ArgumentNullException("Param1");
            }
            else {
                command.Parameters[0].Value = ((string)(Param1));
            }
            command.Parameters[1].Value = ((int)(Param2));
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int InsertDetails2(string Param1, int Param2, string Param3) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[4];
            if ((Param1 == null)) {
                throw new System.ArgumentNullException("Param1");
            }
            else {
                command.Parameters[0].Value = ((string)(Param1));
            }
            command.Parameters[1].Value = ((int)(Param2));
            if ((Param3 == null)) {
                throw new System.ArgumentNullException("Param3");
            }
            else {
                command.Parameters[2].Value = ((string)(Param3));
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int InsertTitles(string Param1, int Param2, int Param3, int Param4, int Param5) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[5];
            if ((Param1 == null)) {
                throw new System.ArgumentNullException("Param1");
            }
            else {
                command.Parameters[0].Value = ((string)(Param1));
            }
            command.Parameters[1].Value = ((int)(Param2));
            command.Parameters[2].Value = ((int)(Param3));
            command.Parameters[3].Value = ((int)(Param4));
            command.Parameters[4].Value = ((int)(Param5));
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdateTitles(string Param1, int Param2, int Param3, int Param4, int Param5, string Param6) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[6];
            if ((Param1 == null)) {
                throw new System.ArgumentNullException("Param1");
            }
            else {
                command.Parameters[0].Value = ((string)(Param1));
            }
            command.Parameters[1].Value = ((int)(Param2));
            command.Parameters[2].Value = ((int)(Param3));
            command.Parameters[3].Value = ((int)(Param4));
            command.Parameters[4].Value = ((int)(Param5));
            if ((Param6 == null)) {
                throw new System.ArgumentNullException("Param6");
            }
            else {
                command.Parameters[5].Value = ((string)(Param6));
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ComicBookDetails1TableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ComicBookDetails1TableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ComicBookDetails1";
            tableMapping.ColumnMappings.Add("Own", "Own");
            tableMapping.ColumnMappings.Add("Want", "Want");
            tableMapping.ColumnMappings.Add("Title", "Title");
            tableMapping.ColumnMappings.Add("SpecialIssue", "SpecialIssue");
            tableMapping.ColumnMappings.Add("IssueNum", "IssueNum");
            tableMapping.ColumnMappings.Add("IssueName", "IssueName");
            tableMapping.ColumnMappings.Add("Grade", "Grade");
            tableMapping.ColumnMappings.Add("Description", "Description");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [ComicBookDetails] WHERE (([Own] = @Original_Own) AND ([Want] = @Original_Want) AND ([Title] = @Original_Title) AND ([SpecialIssue] = @Original_SpecialIssue) AND ([IssueNum] = @Original_IssueNum) AND ((@IsNull_IssueName = 1 AND [IssueName] IS NULL) OR ([IssueName] = @Original_IssueName)) AND ((@IsNull_Grade = 1 AND [Grade] IS NULL) OR ([Grade] = @Original_Grade)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Own", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "Own", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Want", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "Want", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Title", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Title", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_SpecialIssue", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "SpecialIssue", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_IssueNum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "IssueNum", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_IssueName", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "IssueName", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_IssueName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "IssueName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Grade", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Grade", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Grade", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Grade", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [ComicBookDetails] ([Own], [Want], [Title], [SpecialIssue], [IssueNum], [IssueName], [Grade], [Description]) VALUES (@Own, @Want, @Title, @SpecialIssue, @IssueNum, @IssueName, @Grade, @Description);
SELECT Own, Want, Title, SpecialIssue, IssueNum, IssueName, Grade, Description FROM ComicBookDetails WHERE (IssueNum = @IssueNum) AND (SpecialIssue = @SpecialIssue) AND (Title = @Title)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Own", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "Own", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Want", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "Want", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Title", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Title", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SpecialIssue", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "SpecialIssue", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IssueNum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "IssueNum", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IssueName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "IssueName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Grade", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Grade", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Description", System.Data.SqlDbType.Text, 0, System.Data.ParameterDirection.Input, 0, 0, "Description", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [ComicBookDetails] SET [Own] = @Own, [Want] = @Want, [Title] = @Title, [SpecialIssue] = @SpecialIssue, [IssueNum] = @IssueNum, [IssueName] = @IssueName, [Grade] = @Grade, [Description] = @Description WHERE (([Own] = @Original_Own) AND ([Want] = @Original_Want) AND ([Title] = @Original_Title) AND ([SpecialIssue] = @Original_SpecialIssue) AND ([IssueNum] = @Original_IssueNum) AND ((@IsNull_IssueName = 1 AND [IssueName] IS NULL) OR ([IssueName] = @Original_IssueName)) AND ((@IsNull_Grade = 1 AND [Grade] IS NULL) OR ([Grade] = @Original_Grade)));
SELECT Own, Want, Title, SpecialIssue, IssueNum, IssueName, Grade, Description FROM ComicBookDetails WHERE (IssueNum = @IssueNum) AND (SpecialIssue = @SpecialIssue) AND (Title = @Title)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Own", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "Own", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Want", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "Want", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Title", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Title", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SpecialIssue", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "SpecialIssue", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IssueNum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "IssueNum", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IssueName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "IssueName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Grade", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Grade", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Description", System.Data.SqlDbType.Text, 0, System.Data.ParameterDirection.Input, 0, 0, "Description", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Own", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "Own", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Want", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "Want", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Title", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Title", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_SpecialIssue", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "SpecialIssue", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_IssueNum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "IssueNum", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_IssueName", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "IssueName", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_IssueName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "IssueName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Grade", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Grade", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Grade", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Grade", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Comics.Properties.Settings.Default.ComicBookConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[5];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "\r\nSELECT Own, Want, Title, SpecialIssue, IssueNum, IssueName, Grade, Description " +
                "FROM ComicBookDetails WHERE (Want = \'True\')";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT Description, Grade, IssueName, IssueNum, Own, SpecialIssue, Title, Want FR" +
                "OM ComicBookDetails WHERE (Own = \'True\')";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
            this._commandCollection[2] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "SELECT Description, Grade, IssueName, IssueNum, Own, SpecialIssue, Title, Want FR" +
                "OM ComicBookDetails WHERE (Own = \'True\') AND (Title LIKE \'%\' + @Param1 + \'%\')";
            this._commandCollection[2].CommandType = System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Param1", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "Title", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = "SELECT Description, Grade, IssueName, IssueNum, Own, SpecialIssue, Title, Want FR" +
                "OM ComicBookDetails WHERE (Want = \'True\') AND (Title LIKE \'%\' + @Param1 + \'%\')";
            this._commandCollection[3].CommandType = System.Data.CommandType.Text;
            this._commandCollection[3].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Param1", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "Title", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[4].Connection = this.Connection;
            this._commandCollection[4].CommandText = @"UPDATE       ComicBookDetails
SET                Own = @Param1, Want = @Param2, Title = @Param3, SpecialIssue = @Param4, IssueNum = @Param5, IssueName = @Param6, Grade = @Param7, 
                         Description = @Param8
WHERE        (Title = @Param3) AND (SpecialIssue = @Param4) AND (IssueNum = @Param5)";
            this._commandCollection[4].CommandType = System.Data.CommandType.Text;
            this._commandCollection[4].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Param1", System.Data.SqlDbType.Bit, 1, System.Data.ParameterDirection.Input, 0, 0, "Own", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Param2", System.Data.SqlDbType.Bit, 1, System.Data.ParameterDirection.Input, 0, 0, "Want", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Param3", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "Title", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Param4", System.Data.SqlDbType.Bit, 1, System.Data.ParameterDirection.Input, 0, 0, "SpecialIssue", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Param5", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "IssueNum", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Param6", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "IssueName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Param7", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "Grade", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Param8", System.Data.SqlDbType.Text, 2147483647, System.Data.ParameterDirection.Input, 0, 0, "Description", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ComicBookDataSet.ComicBookDetails1DataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ComicBookDataSet.ComicBookDetails1DataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ComicBookDataSet.ComicBookDetails1DataTable dataTable = new ComicBookDataSet.ComicBookDetails1DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillOwn(ComicBookDataSet.ComicBookDetails1DataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual ComicBookDataSet.ComicBookDetails1DataTable GetDataOwn() {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            ComicBookDataSet.ComicBookDetails1DataTable dataTable = new ComicBookDataSet.ComicBookDetails1DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillOwnSearch(ComicBookDataSet.ComicBookDetails1DataTable dataTable, string Param1) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((Param1 == null)) {
                throw new System.ArgumentNullException("Param1");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(Param1));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual ComicBookDataSet.ComicBookDetails1DataTable GetDataOwnSearch(string Param1) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((Param1 == null)) {
                throw new System.ArgumentNullException("Param1");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(Param1));
            }
            ComicBookDataSet.ComicBookDetails1DataTable dataTable = new ComicBookDataSet.ComicBookDetails1DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillWantSearch(ComicBookDataSet.ComicBookDetails1DataTable dataTable, string Param1) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            if ((Param1 == null)) {
                throw new System.ArgumentNullException("Param1");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(Param1));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual ComicBookDataSet.ComicBookDetails1DataTable GetDataWantSearch(string Param1) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            if ((Param1 == null)) {
                throw new System.ArgumentNullException("Param1");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(Param1));
            }
            ComicBookDataSet.ComicBookDetails1DataTable dataTable = new ComicBookDataSet.ComicBookDetails1DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ComicBookDataSet.ComicBookDetails1DataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ComicBookDataSet dataSet) {
            return this.Adapter.Update(dataSet, "ComicBookDetails1");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(bool Original_Own, bool Original_Want, string Original_Title, bool Original_SpecialIssue, int Original_IssueNum, string Original_IssueName, string Original_Grade) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((bool)(Original_Own));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((bool)(Original_Want));
            if ((Original_Title == null)) {
                throw new System.ArgumentNullException("Original_Title");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_Title));
            }
            this.Adapter.DeleteCommand.Parameters[3].Value = ((bool)(Original_SpecialIssue));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_IssueNum));
            if ((Original_IssueName == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_IssueName));
            }
            if ((Original_Grade == null)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_Grade));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(bool Own, bool Want, string Title, bool SpecialIssue, int IssueNum, string IssueName, string Grade, string Description) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((bool)(Own));
            this.Adapter.InsertCommand.Parameters[1].Value = ((bool)(Want));
            if ((Title == null)) {
                throw new System.ArgumentNullException("Title");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Title));
            }
            this.Adapter.InsertCommand.Parameters[3].Value = ((bool)(SpecialIssue));
            this.Adapter.InsertCommand.Parameters[4].Value = ((int)(IssueNum));
            if ((IssueName == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(IssueName));
            }
            if ((Grade == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(Grade));
            }
            if ((Description == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(Description));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(bool Own, bool Want, string Title, bool SpecialIssue, int IssueNum, string IssueName, string Grade, string Description, bool Original_Own, bool Original_Want, string Original_Title, bool Original_SpecialIssue, int Original_IssueNum, string Original_IssueName, string Original_Grade) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((bool)(Own));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((bool)(Want));
            if ((Title == null)) {
                throw new System.ArgumentNullException("Title");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Title));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((bool)(SpecialIssue));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(IssueNum));
            if ((IssueName == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(IssueName));
            }
            if ((Grade == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Grade));
            }
            if ((Description == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Description));
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((bool)(Original_Own));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((bool)(Original_Want));
            if ((Original_Title == null)) {
                throw new System.ArgumentNullException("Original_Title");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Original_Title));
            }
            this.Adapter.UpdateCommand.Parameters[11].Value = ((bool)(Original_SpecialIssue));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(Original_IssueNum));
            if ((Original_IssueName == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[14].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Original_IssueName));
            }
            if ((Original_Grade == null)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[16].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Original_Grade));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdateDetailsIndi(bool Param1, bool Param2, string Param3, bool Param4, int Param5, string Param6, string Param7, string Param8) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[4];
            command.Parameters[0].Value = ((bool)(Param1));
            command.Parameters[1].Value = ((bool)(Param2));
            if ((Param3 == null)) {
                throw new System.ArgumentNullException("Param3");
            }
            else {
                command.Parameters[2].Value = ((string)(Param3));
            }
            command.Parameters[3].Value = ((bool)(Param4));
            command.Parameters[4].Value = ((int)(Param5));
            if ((Param6 == null)) {
                command.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[5].Value = ((string)(Param6));
            }
            if ((Param7 == null)) {
                command.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[6].Value = ((string)(Param7));
            }
            if ((Param8 == null)) {
                command.Parameters[7].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[7].Value = ((string)(Param8));
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ComicBookNumOwnedTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ComicBookNumOwnedTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ComicBookNumOwned";
            tableMapping.ColumnMappings.Add("Title", "Title");
            tableMapping.ColumnMappings.Add("Count of Owned", "Count of Owned");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Comics.Properties.Settings.Default.ComicBookConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT Title, Count(DISTINCT IssueNum) AS \'Count of Owned\'\r\nFROM ComicBookDetails" +
                " \r\nWHERE (Own = \'True\')\r\nGROUP BY Title";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT Title, Count(DISTINCT IssueNum) AS \'Count of Owned\'\r\nFROM ComicBookDetails" +
                " \r\nWHERE (Own = \'True\') AND (Title LIKE \'%\' + @Param1 + \'%\')\r\nGROUP BY Title";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Param1", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "Title", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int FillNumOwned(ComicBookDataSet.ComicBookNumOwnedDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ComicBookDataSet.ComicBookNumOwnedDataTable GetDataNumOwned() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ComicBookDataSet.ComicBookNumOwnedDataTable dataTable = new ComicBookDataSet.ComicBookNumOwnedDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillNumOwnedSearch(ComicBookDataSet.ComicBookNumOwnedDataTable dataTable, string Param1) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((Param1 == null)) {
                throw new System.ArgumentNullException("Param1");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(Param1));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual ComicBookDataSet.ComicBookNumOwnedDataTable GetDataNumOwnedSearch(string Param1) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((Param1 == null)) {
                throw new System.ArgumentNullException("Param1");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(Param1));
            }
            ComicBookDataSet.ComicBookNumOwnedDataTable dataTable = new ComicBookDataSet.ComicBookNumOwnedDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
}

#pragma warning restore 1591